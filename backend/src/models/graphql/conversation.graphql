scalar DateTime

type Query {
  conversations(organizationId: ID!, filters: ConversationFilters): [Conversation!]!
  conversation(id: ID!): Conversation
}

type Mutation {
  changeConversationStatus(id: ID!, status: ConversationStatus!): Conversation!
  assignConversation(id: ID!, assigneeId: ID): Conversation!
}

input ConversationFilters {
  assigneeId: ID
  status: ConversationStatus
  priority: Priority
  inboxId: ID
  search: String
}

type Conversation {
  id: ID!
  status: ConversationStatus!
  priority: Priority!
  subject: String
  unreadCount: Int
  messages(last: Int): [Message!]
  contact: Contact
  assignee: User
  inbox: Inbox!
  organization: Organization!
  labels: [ConversationLabel!]
  channelData: JSON
  customFields: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  firstResponseAt: DateTime
  resolvedAt: DateTime
  reopenedAt: DateTime
  closedAt: DateTime
  slaStatus: String
  rating: Int
  ratingComment: String
  lastMessageAt: DateTime
}

enum ConversationStatus {
  OPEN
  PENDING
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

type Message {
  id: ID!
  content: String!
  type: String!
  isFromContact: Boolean!
  createdAt: DateTime!
  user: User
  contact: Contact
}

type ConversationLabel {
  id: ID!
  name: String!
  color: String!
  conversation: Conversation!
  createdAt: DateTime!
  updatedAt: DateTime!
}
