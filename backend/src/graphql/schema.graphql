export const typeDefs = `#graphql
  scalar DateTime

  type User {
    id: ID!
    email: String!
    name: String!
    role: Role
    active: Boolean!
    createdAt: String!
    updatedAt: String!
    parentUser: User
    parentUserId: String
    agents: [User!]
    currentOrgId: String
    organizations: [OrganizationUser!]
  }

  type Role {
    id: ID!
    name: String!
    description: String
    permissions: [Permission!]!
    createdAt: String!
    updatedAt: String!
  }

  type Permission {
    id: ID!
    name: String!
    description: String
    createdAt: String!
    updatedAt: String!
  }

  type AuthPayload {
    token: String!
    user: User!
  }

  type SystemStatus {
    configured: Boolean!
    version: String!
    status: String!
  }

  type Organization {
    id: ID!
    name: String!
    slug: String!
    inboxes: [Inbox!]!
  }

  type OrganizationUser {
    organization: Organization!
    isAdmin: Boolean!
    isOwner: Boolean!
    status: String!
  }

  type Contact {
    id: ID!
    name: String!
    email: String
    phone: String
    avatar: String
    tags: [String!]
    notes: String
    lastContactedAt: String
    createdAt: String!
    updatedAt: String!
    organization: Organization!
  }

  type Team {
    id: ID!
    name: String!
  }

  type Inbox {
    id: ID!
    name: String!
    description: String
    channelType: ChannelSource!
    isEnabled: Boolean!
    organization: Organization!
    teams: [InboxTeam!]!
    createdAt: DateTime!
    updatedAt: DateTime!
  }

  type InboxTeam {
    id: ID!
    inbox: Inbox!
    team: Team!
    createdAt: DateTime!
    updatedAt: DateTime!
  }

  enum ChannelSource {
    WEBCHAT
    WHATSAPP
    TELEGRAM
    EMAIL
    API
  }

  input ContactInput {
    organizationId: ID!
    name: String!
    email: String
    phone: String
    tags: [String!]
    notes: String
  }

  input InboxInput {
    name: String!
    description: String
    channelType: ChannelSource!
    organizationId: ID!
  }

  type Query {
    me: User
    users: [User!]!
    roles: [Role!]!
    permissions: [Permission!]!
    systemStatus: SystemStatus!
    contacts(organizationId: ID!): [Contact!]!
    inbox(id: ID!): Inbox
    organization(id: ID!): Organization
  }

  type Mutation {
    # Auth
    register(email: String!, password: String!, name: String!): AuthPayload!
    login(email: String!, password: String!): AuthPayload!
    
    # Users
    createUser(email: String!, password: String!, name: String!, roleId: String!, parentUserId: String): User!
    updateUser(id: ID!, email: String, name: String, roleId: String, active: Boolean): User!
    deleteUser(id: ID!): Boolean!
    
    # Roles
    createRole(name: String!, description: String): Role!
    updateRole(id: ID!, name: String, description: String): Role!
    deleteRole(id: ID!): Boolean!
    
    # Role Permissions
    addPermissionToRole(roleId: ID!, permissionId: ID!): Role!
    removePermissionFromRole(roleId: ID!, permissionId: ID!): Role!
    
    # Contacts
    createContact(input: ContactInput!): Contact!
    updateContact(id: ID!, input: ContactInput!): Contact!
    deleteContact(id: ID!): Boolean!
    
    # Inboxes
    createInbox(input: InboxInput!): Inbox!
    updateInbox(id: ID!, input: InboxInput!): Inbox!
    deleteInbox(id: ID!): ID!
  }
` 

type Activity {
  id: ID!
  type: String!
  description: String!
  user: String!
  timestamp: String!
}

type AdminStats {
  totalUsers: Int!
  totalRoles: Int!
  roles: [Role!]!
}

extend type Query {
  recentActivities: [Activity!]!
  adminStats: AdminStats! @auth(requires: MANAGE_SYSTEM)
} 