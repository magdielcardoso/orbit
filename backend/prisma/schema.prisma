// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemStatus {
  PENDING_SETUP
  CONFIGURED
}

model SystemConfig {
  id              String       @id @default(uuid())
  status          SystemStatus @default(PENDING_SETUP)
  systemName      String?
  timezone        String?
  theme           String?      @default("light")
  language        String?      @default("pt-BR")
  
  // Configurações de Branding
  brandConfig     BrandConfig? @relation(fields: [brandConfigId], references: [id])
  brandConfigId   String?      @unique
  
  // Configurações de Chat
  chatConfig      ChatConfig?  @relation(fields: [chatConfigId], references: [id])
  chatConfigId    String?      @unique
  
  // Configurações de Email
  smtpHost        String?
  smtpPort        Int?
  smtpUser        String?
  smtpPassword    String?
  smtpFromEmail   String?
  smtpFromName    String?
  
  // Configurações de Notificação
  pushEnabled     Boolean      @default(false)
  webPushEnabled  Boolean      @default(false)
  pushVapidPublic String?
  pushVapidPrivate String?
  
  // Limites e Quotas
  maxUsersPerChat Int?        @default(50)
  maxFileSize     Int?        @default(5242880) // 5MB em bytes
  allowedFileTypes String[]   @default(["image/jpeg", "image/png", "application/pdf"])
  
  // Integrações
  whatsappEnabled Boolean     @default(false)
  whatsappToken   String?
  telegramEnabled Boolean     @default(false)
  telegramToken   String?
  
  // Retenção de Dados
  messageRetentionDays Int?   @default(90)
  autoDeleteInactiveUsers Boolean @default(false)
  inactiveUserDays Int?       @default(365)
  
  setupCompletedAt DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  active    Boolean  @default(true)
  roleId    String?
  role      Role?     @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  activities Activity[]
  
  // Relações de agent
  parentUser   User?    @relation("UserAgents", fields: [parentUserId], references: [id])
  parentUserId String?
  agents       User[]   @relation("UserAgents")
  
  // Novas relações
  assignedConversations Conversation[] @relation("AssignedConversations")
  teams                 TeamMember[]
  
  // Campos adicionais
  avatar               String?
  status              String?         @default("online") // online, offline, away
  lastActivityAt      DateTime?
  
  // Novas relações
  organizations    OrganizationUser[]
  currentOrgId     String?           // Organização atual selecionada
  preferences      Json?             // Preferências do usuário (tema, notificações, etc)
  lastSeenAt       DateTime?
  deviceTokens     Json?             // Tokens para push notification
  twoFactorEnabled Boolean           @default(false)
  twoFactorSecret  String?
  currentOrg   Organization? @relation("CurrentOrg", fields: [currentOrgId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  // Novos campos
  conversationId      String
  conversation        Conversation    @relation(fields: [conversationId], references: [id])
  type               String          @default("text") // text, image, file, etc
  metadata           Json?           // Para dados adicionais como status de entrega
  private            Boolean         @default(false)  // Para notas internas
  attachments        Json?           // URLs de arquivos anexados
}

model Activity {
  id          String   @id @default(uuid())
  type        ActivityType @default(USER_ACTION)
  level       ActivityLevel @default(INFO)
  source      String  @default("SYSTEM") // 'FRONTEND' ou 'BACKEND'
  action      String  @default("LEGACY") // ação específica realizada
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  metadata    Json?   // dados adicionais em formato JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ActivityType {
  USER_ACTION
  SYSTEM_EVENT
  ERROR
  AUTH
  API_CALL
}

enum ActivityLevel {
  INFO
  WARNING
  ERROR
  DEBUG
}

model ChatConfig {
  id                String        @id @default(uuid())
  systemConfig      SystemConfig?
  
  // Aparência do Chat
  primaryColor      String?       @default("#9333EA") // Cor roxa padrão
  secondaryColor    String?       @default("#22C55E")
  fontFamily        String?       @default("Inter")
  customCSS         String?       // CSS personalizado
  
  // Comportamento
  welcomeMessage    String?
  offlineMessage    String?
  operatingHours    OperatingHours[]
  autoReply         Boolean       @default(true)
  autoReplyDelay    Int?         @default(60) // segundos
  
  // Recursos
  enableFileSharing Boolean      @default(true)
  enableEmojis      Boolean      @default(true)
  enableTypingIndicator Boolean  @default(true)
  enableReadReceipts Boolean     @default(true)
  enableUserProfile  Boolean     @default(true)
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model OperatingHours {
  id            String      @id @default(uuid())
  chatConfig    ChatConfig  @relation(fields: [chatConfigId], references: [id])
  chatConfigId  String
  dayOfWeek     Int        // 0-6 (Domingo-Sábado)
  startTime     String     // formato "HH:mm"
  endTime       String     // formato "HH:mm"
  isEnabled     Boolean    @default(true)
}

model BrandConfig {
  id                String        @id @default(uuid())
  systemConfig      SystemConfig?
  
  // Identidade Visual
  logo              String?       // URL do logo
  favicon           String?       // URL do favicon
  primaryColor      String        @default("#9333EA")
  secondaryColor    String        @default("#22C55E")
  accentColor       String        @default("#F59E0B")
  
  // Fontes
  primaryFont       String        @default("Inter")
  secondaryFont     String?
  
  // Elementos de Marca
  companyName       String?
  slogan            String?
  description       String?       @db.Text
  
  // Redes Sociais
  socialLinks       Json?         // { facebook, twitter, instagram, linkedin }
  
  // Personalização
  customCss        String?       @db.Text
  customJs         String?       @db.Text
  
  // Imagens
  loginBackground  String?       // URL da imagem de fundo do login
  emailLogo        String?       // URL do logo para emails
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

// Nova enum para status de conversas
enum ConversationStatus {
  OPEN
  PENDING
  RESOLVED
  CLOSED
}

// Nova enum para prioridade
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Nova enum para origem da conversa
enum ChannelSource {
  WHATSAPP
  INSTAGRAM
  MESSENGER
  TWITTER
  MERCADOLIVRE
  SHOPEE
  TELEGRAM
  EMAIL
  API
  IFOOD
  WEBCHAT
}

// Nova model para Inbox (caixas de entrada)
model Inbox {
  id            String      @id @default(cuid())
  name          String
  description   String?
  channelType   ChannelSource
  isEnabled     Boolean     @default(true)
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  teams         InboxTeam[]
  conversations Conversation[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Nova model para Times
model Team {
  id          String      @id @default(uuid())
  name        String
  description String?
  isEnabled   Boolean     @default(true)
  
  // Relações
  members     TeamMember[]
  inboxes     InboxTeam[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  organizationId   String
  organization     Organization      @relation(fields: [organizationId], references: [id])
  color           String            @default("#666666")
  icon            String?           // URL do ícone do time
  settings        Json?             // Configurações específicas do time
}

// Relação entre Time e Usuário
model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  isLeader  Boolean  @default(false)
  
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
}

// Relação entre Time e Inbox
model InboxTeam {
  id        String   @id @default(cuid())
  inbox     Inbox    @relation(fields: [inboxId], references: [id])
  inboxId   String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Nova model para Conversas
model Conversation {
  id            String            @id @default(uuid())
  status        ConversationStatus @default(OPEN)
  priority      Priority          @default(MEDIUM)
  subject       String?
  
  // Relações
  inboxId       String
  inbox         Inbox             @relation(fields: [inboxId], references: [id])
  messages      Message[]
  assigneeId    String?
  assignee      User?             @relation("AssignedConversations", fields: [assigneeId], references: [id])
  labels        ConversationLabel[]
  
  // Metadados
  channelData   Json?            // Dados específicos do canal
  customFields  Json?            // Campos personalizados
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  organizationId   String
  organization     Organization      @relation(fields: [organizationId], references: [id])
  contactId        String?          // Referência ao contato
  contact          Contact?         @relation(fields: [contactId], references: [id])
  firstResponseAt  DateTime?        // Tempo primeira resposta
  resolvedAt       DateTime?        // Quando foi resolvido
  reopenedAt       DateTime?        // Quando foi reaberto
  closedAt         DateTime?        // Quando foi fechado
  slaStatus        String?          // Status do SLA
  rating           Int?             // Avaliação do atendimento
  ratingComment    String?          // Comentário da avaliação
}

// Nova model para Etiquetas
model Label {
  id            String              @id @default(uuid())
  name          String              @unique
  color         String              @default("#666666")
  description   String?
  conversations ConversationLabel[]
  
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

// Relação entre Conversa e Etiqueta
model ConversationLabel {
  id              String        @id @default(uuid())
  conversationId  String
  labelId         String
  
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  label          Label         @relation(fields: [labelId], references: [id])
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([conversationId, labelId])
}

// Nova enum para planos
enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

// Nova enum para status de pagamento
enum PaymentStatus {
  ACTIVE
  PENDING
  OVERDUE
  CANCELLED
}

// Nova model para Organizações (Tenants)
model Organization {
  id            String           @id @default(uuid())
  name          String
  slug          String          @unique
  domain        String?         // Domínio personalizado
  plan          SubscriptionPlan @default(FREE)
  paymentStatus PaymentStatus   @default(ACTIVE)
  
  // Limites do plano
  maxUsers      Int             @default(5)    // Limite de usuários
  maxTeams      Int             @default(1)    // Limite de times
  maxInboxes    Int             @default(2)    // Limite de caixas de entrada
  
  // Configurações específicas
  timezone      String          @default("UTC")
  locale        String          @default("pt-BR")
  features      Json?           // Features habilitadas/desabilitadas
  
  // Dados de faturamento
  billingEmail  String?
  billingName   String?
  billingAddress Json?
  taxId         String?         // CNPJ/CPF
  
  // Relações
  users         OrganizationUser[]
  teams         Team[]
  inboxes       Inbox[]
  conversations Conversation[]
  contacts      Contact[]        // Adicionando relação inversa para Contact
  automations   Automation[]     // Adicionando relação inversa para Automation
  currentUsers User[] @relation("CurrentOrg") // Adiciona relação inversa
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?       // Soft delete
}

// Rela��ão entre Usuário e Organização
model OrganizationUser {
  id             String       @id @default(uuid())
  organizationId String
  userId         String
  isAdmin        Boolean      @default(false)
  isOwner        Boolean      @default(false)
  status         String       @default("active") // active, invited, suspended
  
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([organizationId, userId])
}

// Nova model para Contatos
model Contact {
  id              String         @id @default(uuid())
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id])
  
  // Dados básicos
  name            String
  email           String?
  phone           String?
  avatar          String?
  
  // Dados adicionais
  customFields    Json?          // Campos personalizados
  tags           String[]       // Tags do contato
  notes          String?        // Notas internas
  
  // Metadados
  lastContactedAt DateTime?
  conversations   Conversation[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([organizationId, email])
  @@unique([organizationId, phone])
}

// Nova model para Automações
model Automation {
  id              String       @id @default(uuid())
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  
  name            String
  description     String?
  isActive        Boolean      @default(true)
  
  // Configuração da automação
  trigger         Json         // Evento que dispara a automação
  conditions      Json         // Condições para executar
  actions         Json         // Ações a serem executadas
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

